//
//  test.cpp
//  mirror tree
//
//  Created by John  on 13.03.16.
//
/*
给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。

示例 1:

输入: num1 = "2", num2 = "3"
输出: "6"
示例 2:

输入: num1 = "123", num2 = "456"
输出: "56088"
说明：

num1 和 num2 的长度小于110。
num1 和 num2 只包含数字 0-9。
num1 和 num2 均不以零开头，除非是数字 0 本身。
不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/multiply-strings
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
#include <iostream>
#include <unordered_map>
#include <vector>
#include <string>
#include <stack>
#include <cstring>
#include <limits.h>
#include <algorithm>

using namespace std;
class Solution {
public:
  string multiply(string num1, string num2)
  {
    static int multi_res[10][10] = 
    {
      {0,0,0,0,0,0,0,0,0,0},
      {0,1,2,3,4,5,6,7,8,9},
      {0,2,4,6,8,10,12,14,16,18},
      {0,3,6,9,12,15,18,21,24,27},
      {0,4,8,12,16,20,24,28,32,36},
      {0,5,10,15,20,25,30,35,40,45},
      {0,6,12,18,24,30,36,42,48,54},
      {0,7,14,21,28,35,42,49,56,63},
      {0,8,16,24,32,40,48,56,64,72},
      {0,9,18,27,36,45,54,63,72,81},
    }
    if (num1.compare("0") == 0 || num2.compare("0") == 0)
    {
      return {"0"};
    }
    string res(num1.size() + num2.size(), '0');
    int num1_val = 0;
    int num2_val = 0;
    vector<int> res_val(num1.size() + num2.size(), 0);
    //int res_mul = 0;
    // const char * res_mul = nullptr;
    // const char * res_add = nullptr;
    for (int i = num2.size() - 1;i >= 0;i--)
    {
      num2_val = num2[i] - '0';
      for (int j = num1.size() - 1;j >= 0;j--)
      {
        num1_val = num1[j] - '0';
        //res_val[i+j+1] += (num1_val * num2_val) ;
        res_val[i+j+1] += multi_res[num1_val][num2_val];
      }
    }

    for (int i = res.size() - 1;i>0 ;i--)
    {
      res_val[i - 1] += res_val[i] / 10;
      res_val[i] = res_val[i] % 10;
      res[i] = '0' + res_val[i];
    }

    res[0] = '0' + res_val[0];
    if (res[0] == '0')
    {
      return res.substr(1);
    }
    return res;
  }

  // string singleMutiply(string num1, string num2) //NUM2为单个值
  // {
  //   // static const char* multi_res[10][10] = 
  //   // {
  //   //   {"00","00","00","00","00","00","00","00","00","00"},
  //   //   {"00","01","02","03","04","05","06","07","08","09"},
  //   //   {"00","02","04","06","08","10","12","14","16","18"},
  //   //   {"00","03","06","09","12","15","18","21","24","27"},
  //   //   {"00","04","08","12","16","20","24","28","32","36"},
  //   //   {"00","05","10","15","20","25","30","35","40","45"},
  //   //   {"00","06","12","18","24","30","36","42","48","54"},
  //   //   {"00","07","14","21","28","35","42","49","56","63"},
  //   //   {"00","08","16","24","32","40","48","56","66","72"},
  //   //   {"00","09","18","27","36","45","54","63","72","81"}
  //   // }

  //   // static const char* add_res[10][10] = 
  //   // {
  //   //   {"00","01","02","03","04","05","06","07","08","09"},
  //   //   {"01","02","03","04","05","06","07","08","09","10"},
  //   //   {"02","03","04","05","06","07","08","09","10","11"},
  //   //   {"03","04","05","06","07","08","09","10","11","12"},
  //   //   {"04","05","06","07","08","09","10","11","12","13"},
  //   //   {"05","06","07","08","09","10","11","12","13","14"},
  //   //   {"06","07","08","09","10","11","12","13","14","15"},
  //   //   {"07","08","09","10","11","12","13","14","15","16"},
  //   //   {"08","09","10","11","12","13","14","15","16","17"},
  //   //   {"09","10","11","12","13","14","15","16","17","18"}
  //   // }

    

  // }

};

int main()
{
  Solution solution;
  
  //vector<int> candidates = {1,2,0};

  string ret = solution.multiply("123", "456");
  
  std::cout<<"ret value["<<ret<<"]!"<<std::endl;

  return 0;
}